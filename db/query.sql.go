// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const createApp = `-- name: CreateApp :exec
INSERT INTO apps (package, meta_added, meta_last_updated, meta_source_code) VALUES (?, ?, ?, ?)
`

type CreateAppParams struct {
	Package         string
	MetaAdded       int64
	MetaLastUpdated int64
	MetaSourceCode  string
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) error {
	_, err := q.db.ExecContext(ctx, createApp,
		arg.Package,
		arg.MetaAdded,
		arg.MetaLastUpdated,
		arg.MetaSourceCode,
	)
	return err
}

const existApp = `-- name: ExistApp :one
SELECT EXISTS(SELECT 1 FROM apps WHERE package = ?)
`

func (q *Queries) ExistApp(ctx context.Context, package_ string) (int64, error) {
	row := q.db.QueryRowContext(ctx, existApp, package_)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getApp = `-- name: GetApp :one
SELECT package, meta_added, meta_last_updated, meta_source_code, last_save_triggered FROM apps
WHERE package = ? LIMIT 1
`

func (q *Queries) GetApp(ctx context.Context, package_ string) (App, error) {
	row := q.db.QueryRowContext(ctx, getApp, package_)
	var i App
	err := row.Scan(
		&i.Package,
		&i.MetaAdded,
		&i.MetaLastUpdated,
		&i.MetaSourceCode,
		&i.LastSaveTriggered,
	)
	return i, err
}

const getAppNeedSave = `-- name: GetAppNeedSave :many
SELECT package, meta_added, meta_last_updated, meta_source_code, last_save_triggered FROM apps
WHERE meta_last_updated > last_save_triggered LIMIT ?
`

func (q *Queries) GetAppNeedSave(ctx context.Context, limit int64) ([]App, error) {
	rows, err := q.db.QueryContext(ctx, getAppNeedSave, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []App
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.Package,
			&i.MetaAdded,
			&i.MetaLastUpdated,
			&i.MetaSourceCode,
			&i.LastSaveTriggered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastSaveTriggered = `-- name: UpdateLastSaveTriggered :exec
UPDATE apps SET last_save_triggered = ?
WHERE package = ?
`

type UpdateLastSaveTriggeredParams struct {
	LastSaveTriggered int64
	Package           string
}

func (q *Queries) UpdateLastSaveTriggered(ctx context.Context, arg UpdateLastSaveTriggeredParams) error {
	_, err := q.db.ExecContext(ctx, updateLastSaveTriggered, arg.LastSaveTriggered, arg.Package)
	return err
}

const updateMeta = `-- name: UpdateMeta :exec
UPDATE apps SET meta_added = ?, meta_last_updated = ?, meta_source_code = ?
WHERE package = ?
`

type UpdateMetaParams struct {
	MetaAdded       int64
	MetaLastUpdated int64
	MetaSourceCode  string
	Package         string
}

func (q *Queries) UpdateMeta(ctx context.Context, arg UpdateMetaParams) error {
	_, err := q.db.ExecContext(ctx, updateMeta,
		arg.MetaAdded,
		arg.MetaLastUpdated,
		arg.MetaSourceCode,
		arg.Package,
	)
	return err
}
